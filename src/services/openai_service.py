"""
openai_service.py

This module provides a function to interact with the OpenAI API, allowing users to send a message
and receive a response from an AI model. It includes error handling and logging to ensure that
errors are captured and logged appropriately.
"""

import os
import logging
from openai import OpenAI
from requests.exceptions import HTTPError, Timeout

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

client = OpenAI()

# Load the model name from the environment variables
MODEL = os.getenv("OPENAI_CHAT_MODEL")

# Configure timeout
DEFAULT_TIMEOUT = 10  # seconds

if not MODEL:
    logger.error("OPENAI_CHAT_MODEL environment variable is not set.")
    raise ValueError(
        "Missing OpenAI model configuration. Please set \
            the OPENAI_CHAT_MODEL environment variable.")

def get_openai_response(message: str) -> str:
    """
    Sends a message to the OpenAI API and retrieves the response.

    :param message: The user's input message to be processed by OpenAI.
    :return: The response generated by the OpenAI model.
    """
    # Check if the message is valid
    if not message or not isinstance(message, str):
        logger.error("Invalid message input: must be a non-empty string.")
        raise ValueError("The input message must be a non-empty string.")

    # Prepare the messages for the OpenAI API
    messages = [
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": message}
    ]

    try:
        logger.info("Sending request to OpenAI...")
        # Call OpenAI API for the response
        response = client.ChatCompletion.create(
            model= MODEL,
            temperature= 0,
            messages= messages,
            request_timeout= DEFAULT_TIMEOUT
        )
        logger.info("OpenAI response received successfully.")
        return response.choices[0].message["content"]

    except Timeout as e:
        # Log timeout-specific errors and retry
        logger.error("Request to OpenAI API timed out: %s", e)
        raise RuntimeError(f"Request timed out: {e}") from e

    except HTTPError as e:
        # Log HTTP-specific errors and explicitly re-raise the exception
        logger.error("HTTP error occurred during OpenAI API request: %s", e)
        raise RuntimeError(f"Failed to fetch response due to HTTP error: {e}") from e
    
    except Exception as e:
        # Log any unexpected exceptions and explicitly re-raise
        logger.error("An unexpected error occurred: %s", e)
        raise RuntimeError(f"An unexpected error occurred: {e}") from e